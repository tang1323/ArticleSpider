[{"title": "Linux系统安装01-centos7系统安装-风骚男", "content": "<div id=\"cnblogs_post_body\" class=\"blogpost-body\">\n    <p>2020注定是一个不平凡的年份，对于各行各业都是不小的波动。话说回来，从当前的互联网趋势来看，linux的使用以后会越来越广泛，既然之前不懂linux，那么我们就从头开始，先学习Linux的系统安装。</p>\n<p>先从简单开始，如何在虚拟机下安装分区简单的配置Centos7</p>\n<h2>一、相关附件</h2>\n<p>Centos7下载地址：https://mirrors.aliyun.com/centos-vault/7.6.1810/isos/x86_64/CentOS-7-x86_64-DVD-1810.torrent</p>\n<p>VMware下载地址：https://my.vmware.com/cn/web/vmware/downloads/info/slug/desktop_end_user_computing/vmware_workstation_pro/15_0</p>\n<p>菜鸟教程linux板块：https://www.runoob.com/linux/linux-tutorial.html</p>\n<h2>二、环境准备</h2>\n<p>系统镜像-centos7.6-X64-1810</p>\n<p>平台-虚拟机-VMwareworkstation15(PRO)</p>\n<p>安装vmware的主机-WIN2012R2数据中心版</p>\n<h2>三、具体步骤</h2>\n<h3>1.下载vmware与centos的安装包，安装vmware。</h3>\n<p>参考链接：https://www.cnblogs.com/tanghaorong/p/13210470.html</p>\n<h3>2.添加虚拟机，创建Linux系统的虚拟机。</h3>\n<p>打开vmware界面-“<span style=\"color: rgba(255, 0, 0, 1)\">创建新的虚拟机</span>”-“自定义”-“下一步”</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1825093/202009/1825093-20200912162842533-966752798.png\" alt=\"\" loading=\"lazy\"></p>\n<p> </p>\n<p> 下一步-兼容性选择直接下一步-“<span style=\"color: rgba(255, 0, 0, 1)\">选择稍后安装操作系统</span>”</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1825093/202009/1825093-20200912163004700-1136415849.png\" alt=\"\" loading=\"lazy\"></p>\n<p> </p>\n<p> 勾选-“<span style=\"color: rgba(255, 0, 0, 1)\">Linux</span>”-下拉菜单选择“<span style=\"color: rgba(255, 0, 0, 1)\">Centos 7 64位</span>”</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1825093/202009/1825093-20200912163135918-714776947.png\" alt=\"\" loading=\"lazy\"></p>\n<p> </p>\n<p> 下一步，<span style=\"color: rgba(255, 0, 0, 1)\">取一个名字，并在D盘下新建一个文件夹</span>，例如“Centos7.6”用来存放虚拟机的数据（最好选择一个大一点的盘新建文件夹，以后虚拟机相关的数据会越用越大）</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1825093/202009/1825093-20200912163442511-503736390.png\" alt=\"\" loading=\"lazy\"></p>\n<p> </p>\n<p>下一步，虚拟<span style=\"color: rgba(255, 0, 0, 1)\">CPU设置2，内存4096MB</span>（相当于虚拟了一台双核4GB的电脑来跑Linux系统）</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1825093/202009/1825093-20200912163627509-118535359.png\" alt=\"\" loading=\"lazy\"><img src=\"https://img2020.cnblogs.com/blog/1825093/202009/1825093-20200912163645746-1265357988.png\" alt=\"\" loading=\"lazy\"></p>\n<p> </p>\n<p>下一步-设置网络-勾选“<span style=\"color: rgba(255, 0, 0, 1)\">使用桥接网络</span>”。简单解释以下，桥接就是相当于跟你本机是一样的网段跟网络，配上一个IP就可以获得跟本机一样的网络环境。</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1825093/202009/1825093-20200912163746981-1130526190.png\" alt=\"\" loading=\"lazy\"></p>\n<p> </p>\n<p> 下一步，<span style=\"color: rgba(255, 0, 0, 1)\">I/O控制器选择“LSI Logic推荐”，磁盘类型-“SCSI 推荐”</span></p>\n<p><span style=\"color: rgba(255, 0, 0, 1)\"><img src=\"https://img2020.cnblogs.com/blog/1825093/202009/1825093-20200912164147502-1725991683.png\" alt=\"\" loading=\"lazy\"><img src=\"https://img2020.cnblogs.com/blog/1825093/202009/1825093-20200912164244418-1723673745.png\" alt=\"\" loading=\"lazy\"></span></p>\n<p> </p>\n<p> </p>\n<p> 磁盘-“<span style=\"color: rgba(255, 0, 0, 1)\">创建新虚拟磁盘</span>”；大小设置100G，选择将“<span style=\"color: rgba(255, 0, 0, 1)\">将虚拟磁盘存储为单个文件</span>”（提高读写，也方便后续迁移虚拟机数据）</p>\n<p> <img src=\"https://img2020.cnblogs.com/blog/1825093/202009/1825093-20200912164336532-926372383.png\" alt=\"\" loading=\"lazy\"><img src=\"https://img2020.cnblogs.com/blog/1825093/202009/1825093-20200912164410266-457785933.png\" alt=\"\" loading=\"lazy\"></p>\n<p> </p>\n<p>指定磁盘文件，浏览刚才存放虚拟机的D:\\centos7.6,把文件存放在一起</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1825093/202009/1825093-20200912164642668-1412319147.png\" alt=\"\" loading=\"lazy\">`</p>\n<p> </p>\n<p> 完成后，会显示一个配置的概述框，可再检查一下</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1825093/202009/1825093-20200912164731941-1939833783.png\" alt=\"\" loading=\"lazy\"></p>\n<p> </p>\n<p> 在左侧栏与显示框也会显示一个虚拟机的界面</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1825093/202009/1825093-20200912164830684-835238915.png\" alt=\"\" loading=\"lazy\"></p>\n<p> </p>\n<p> </p>\n<h1> </h1>\n<h1>至此，虚拟机的新建已经完成。接下来是将刚才下载的ISO镜像挂载至虚拟机，然后分区，基本设置，网络等。</h1>\n<h2><span style=\"color: rgba(255, 0, 0, 1)\">先休息5分钟，在进入下一步。Linux分区与基本安装设置：</span><span style=\"color: rgba(255, 0, 0, 1)\">https://www.cnblogs.com/subsea/p/13657897.html</span></h2>\n<h2>总结：1.学会vmware的新建虚拟机的使用，主要是</h2>\n<h2>　　　　　　　　系统的选择（linux或者windwos），硬件的配置（CPU、内存、磁盘，要本机能够承载），与网络模式的设置（桥接网卡）</h2>\n<h2>　　　2.其他虚拟平台软件创建虚拟机类似，这一部分会了，华为的FusionSphere，微软的Hyper-V，思杰的Citrix Xen，还有virtual box，都差不多</h2>\n<h2>　　　3.在物理机安装，例如服务器或者主机上直接安装，可以用软碟通制作光盘，PE安装等，后续再做一个博客，先由从简单开始。</h2>\n<p> </p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p></p>\n<p></p>\n</div>", "create_date": "2020-09-12", "tags": "李宗盛,编辑,收藏", "comment_nums": 0, "praise_nums": 0, "fav_nums": 0, "url": "https://www.cnblogs.com/subsea/p/13656415.html", "front_image_url": ["https://pic.cnblogs.com/face/1825093/20191007142437.png"], "url_object_id": "d41d8cd98f00b204e9800998ecf8427e", "front_image_path": "full/d68df7ee44173d27102266f6cf16106c919f0db0.jpg"},{"title": "微信开发者工具集成GitHub，多人协调开发，上传拉取等-风骚男", "content": "<div id=\"cnblogs_post_body\" class=\"blogpost-body cnblogs-markdown\">\n    <h3>一，准备环境</h3>\n<p>1，提前安装git环境和GitHub做集成，不做多解释；<br>\n1，准备微信项目代码；<br>\n2，创建GitHub仓库；</p>\n<h3>二，创建GitHub仓库</h3>\n<p>1，创建一个空的GitHub仓库，不要任何文件和不要创建任何分支，后面会从微信开发工具统一导入。（只用填个name，其他不勾选，勾选了会自己创建master分支，这里不用创建分支，如果还是勾选了，后面会讲怎么把微信本地版本分支合并到这个分支上面）<br>\n<img src=\"https://img-blog.csdnimg.cn/20200912154936138.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA2MzMyNjY=,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" loading=\"lazy\"><br>\n2，创建完成后复制项目地址，后面有用<br>\n<img src=\"https://img-blog.csdnimg.cn/20200912155535501.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA2MzMyNjY=,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" loading=\"lazy\"></p>\n<h3>三，微信版本工具集成GitHub</h3>\n<p>1，打开微信开发工具，导入本地项目；<br>\n<img src=\"https://img-blog.csdnimg.cn/20200912155823819.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA2MzMyNjY=,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" loading=\"lazy\"><br>\n2，打开右上角的版本管理，初始化本地git环境<br>\n<img src=\"https://img-blog.csdnimg.cn/20200912160109861.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA2MzMyNjY=,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" loading=\"lazy\"><br>\n3，初始化完成后打开设置，添加GitHub账号密码和项目地址；<br>\n<img src=\"https://img-blog.csdnimg.cn/2020091216030410.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA2MzMyNjY=,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" loading=\"lazy\"><br>\n切换到原创菜单，点击添加：<br>\n<img src=\"https://img-blog.csdnimg.cn/20200912160426915.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA2MzMyNjY=,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" loading=\"lazy\"><br>\n完事后点击确定，就可以直接推送到github了，名称随便写，到时候就是GitHub里面到分支到名字，这里选下面到新的分支相当于给GitHub新建分支；<br>\n<img src=\"https://img-blog.csdnimg.cn/20200912160722488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA2MzMyNjY=,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" loading=\"lazy\"><br>\n成功后远程下面会多出一个分支，就是你新建的分支，另外你可以看的你本地的master标记和GitHub标记还有head标记都合在一起了，说明已经集成完毕了，你去GitHub也能看到这个项目了；<br>\n<img src=\"https://img-blog.csdnimg.cn/20200912161124638.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA2MzMyNjY=,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" loading=\"lazy\"><br>\n<img src=\"https://img-blog.csdnimg.cn/20200912161429900.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA2MzMyNjY=,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" loading=\"lazy\"><br>\n到这里微信版本管理就和GitHub集成完毕了；</p>\n<blockquote>\n<p>补充：前面说到如果勾选了readme导致GitHub已经有了分支怎么办，如果GitHub已经有了分支，就不能按照上面的推送到新分支了，这样会导致GitHub两个分支了，解决方式就是先抓取下来，再把head切换到GitHub到分支上面去，这样本地代码就都属于新加代码了，就可以都提交到GitHub到分支上面了。</p>\n</blockquote>\n<h3>三，推送，抓取，拉取</h3>\n<p>1推送：本地代码变动后，变动会同步到工作区，直接勾选提交就行；<br>\n<img src=\"https://img-blog.csdnimg.cn/20200912162828405.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA2MzMyNjY=,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" loading=\"lazy\"><br>\n然后到本地分支里面可以看到刚刚的提交，（这里因为刚刚有提交了所以head和master跑到第二个提交点了）直接推送到GitHub就行了；<br>\n<img src=\"https://img-blog.csdnimg.cn/2020091216302322.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA2MzMyNjY=,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" loading=\"lazy\"><br>\n推送就不要选新分支了，选刚刚建立的分支就行；<br>\n<img src=\"https://img-blog.csdnimg.cn/20200912163220213.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA2MzMyNjY=,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" loading=\"lazy\"><br>\n2抓取，直接选择刚刚的分支就行；<br>\n<img src=\"https://img-blog.csdnimg.cn/20200912163340823.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA2MzMyNjY=,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" loading=\"lazy\"><br>\n3拉取，拉取这里后面讲，这个适用于把GitHub上面已有的项目拉到本地，覆盖到本地进行开发；</p>\n<h3>四，拉取GitHub项目到本地进行开发</h3>\n<p>1，先新建一个空项目；<br>\n<img src=\"https://img-blog.csdnimg.cn/2020091216401523.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA2MzMyNjY=,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" loading=\"lazy\"><br>\n2，打开版本控制，不用勾选，确保是个干净的项目，后面整体合并；<br>\n<img src=\"https://img-blog.csdnimg.cn/2020091216420277.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA2MzMyNjY=,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" loading=\"lazy\"><br>\n3，设置里面输入GitHub账号密码，和远程项目地址，和上面的一样；<br>\n<img src=\"https://img-blog.csdnimg.cn/20200912164511629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA2MzMyNjY=,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" loading=\"lazy\"><br>\n4，接下来先抓取刚刚加的远程仓库；<br>\n<img src=\"https://img-blog.csdnimg.cn/20200912164627536.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA2MzMyNjY=,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" loading=\"lazy\"><br>\n5，抓取成功之后就可以看的最新的GitHub代码了，接下来重要的一点就是，右键最新的提交点，把head重置的GitHub最新的提交点上面去，保证你本地工作区和它关联上；<br>\n<img src=\"https://img-blog.csdnimg.cn/20200912164938805.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA2MzMyNjY=,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" loading=\"lazy\"><br>\n弹窗里面可以不勾选，反正本地的代码不需要了；<br>\n<img src=\"https://img-blog.csdnimg.cn/20200912165112957.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA2MzMyNjY=,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" loading=\"lazy\"><br>\n6，接下来就是点击拉取，把GitHub代码覆盖到本地，所以下面选择变基；<br>\n<img src=\"https://img-blog.csdnimg.cn/20200912165550665.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA2MzMyNjY=,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" loading=\"lazy\"><br>\n7，变基完成后项目基本就覆盖下来了，剩下就是开发，提交等等了。。。</p>\n<p>补充一点，git到每个标记都有自己含义，类似master，head等等下个章节会讲到；</p>\n\n</div>", "create_date": "2020-09-12", "tags": "双眸,编辑,收藏", "comment_nums": 0, "praise_nums": 0, "fav_nums": 0, "url": "https://www.cnblogs.com/both-eyes/p/13657690.html", "front_image_url": ["https://pic.cnblogs.com/face/1550581/20181129234020.png"], "url_object_id": "d41d8cd98f00b204e9800998ecf8427e", "front_image_path": "full/76663ebed0486e3aa17ebbe7de31a02f4255472d.jpg"},{"title": "Android 重构方案-风骚男", "content": "<div id=\"cnblogs_post_body\" class=\"blogpost-body cnblogs-markdown\">\n    <h3>前言</h3>\n<p>最近面试了很多候选人，发现很多同学在简历上都写得非常厉害，负责架构设计，项目重构之类的。但是问起来，很多人都说不出个所以然来。今天我们不谈架构设计，我们聊一下重构。我面试时候经常会问，你是怎么重构的，从哪些方面入手。大部分的人基本上回答就是换一下网络请求的框架，图片处理的框架，好一些的能够说出一些MVP/MVVM,再好一点的能够说出一些模块化，组件化的东西。给我最大的感觉就是为了重构而重构，或者是无中生有的重构，没有全面的思考过为什么要这样做。我们重构的目的就是为了让项目的可读性，可维护性，扩展性更强。后期其他同学接手，不至于把祖宗都问候一遍。刚好，最近我一直在维护一个2010年到现在的一个项目，谈一谈重构的过程。</p>\n<h4>1、注释， activity、fragment、类、方法  一定要有注释</h4>\n<p>每一个页面，类，方法，都要有对应的注释，写明作者是谁，时间，还有是做什么，这样对后面的同学梳理流程的时候，会顺畅很多。毕竟自己觉得自己写的代码很清晰，在其他人眼中就不一定是这样了。<br>\nactivity：C:\\Program Files\\Android\\Android Studio\\plugins\\android\\lib\\templates\\activities\\EmptyActivity\\root\\src\\app_package<br>\n在头部添加</p>\n<pre><code class=\"language-stylus\">/**\n * @Description: \n * @Author: huangjialin\n * @CreateDate: ${.now?string(\"yyyy-MM-dd\")}\n */\n</code></pre>\n<p>普通类的，可以直接在studio中进行设置  settings -- &gt; File and Code Templates -- &gt;File Header 中添加</p>\n<pre><code class=\"language-stylus\">/**     \n  * @Description:     java类作用描述 \n  * @Author:         huangjialin\n  * @CreateDate:     ${DATE} ${TIME}\n  */\n\n</code></pre>\n<h4>命名规范，统一，包括资源，java文件，布局，方法名，字段等等</h4>\n<p>这里推荐使用插件：<code>Alibaba Java Coding Guidelines</code><br>\n要求：<br>\n1、（从命名上能够知道这个是activity，fragment还是adapter等等）<br>\n2、见其名，能知其意</p>\n<p>在我重构的过程中，遇到很多这样的<br>\n<img src=\"https://img2020.cnblogs.com/blog/967362/202009/967362-20200912171138992-1821157744.png\" alt=\"\" loading=\"lazy\"></p>\n<p>这是直接从项目中进行截图的，我都不担心会出现什么泄密的情况。这样的命名，就只比使用A,B,C这样的命名好一点而已。好的命名基本上能够知道这个类，页面，方法是干什么的，对后面维护的同学也是非常友好的。</p>\n<p>java文件命名，一定要做到见其名，知其意，即使名字长一些也是可以的，比如说aaaActivity ,aaaFragment...,这个aaa基本就是这个文件是做什么的。布局，方法名，字段这些，也是如此，但是命名的同时，也要注意编码规范。<br>\n针对于资源的命名，不光要能从名字中知道含义，还需要考虑后期组件化后，可能会产生的资源冲突<br>\n这里建议在module的build.gradle中添加</p>\n<pre><code class=\"language-stylus\">//给 Module 内的资源名增加前缀, 避免资源名冲突\nresourcePrefix \"${project.name.toLowerCase().replaceAll(\"-\", \"_\")}_\"   \n</code></pre>\n<p>这样给资源命名是会提示添加上对应module的前缀了。</p>\n<h4>3、工具类封装</h4>\n<p>Log,Toast,SharedPreferences,dialog,animation 等等等等，特别是对于经历过多人维护的项目，很多工具类都有很几套，一人弄一套，所以我们要做的就是统一，一个项目中不要出现多个重复的工具类，否则对于后期维护那是很困难的。</p>\n<h4>4、第三方jar的统一  如网络，图片等等</h4>\n<p>比如说我维护的这个项目，2010年写的到现在，光网络请求的就有四个，最早以前就是用HttpURLConnection，然后又有Volley，然后到Okhttp，接着就是Retrofit + okhttp,导致了现在一个很严重的问题，新人维护都不敢乱动，一直堆代码，当然，现在这样的请求是没事，但是如果后期,比如说需要更改域名，加密，在头部添加一些参数，等等等等 ，那倒霉的永远是最后一个接手的人。<br>\n当然这里需要注意两个问题<br>\n第一：不要一上来就直接全部替换，要循序渐进，直接全部替换，那么风险会非常大，对开发人员，测试人员，压力都会很大。<br>\n第二：既然要统一，那么选用个框架比较好？我个人的看法是首先是选择稳定性好的，性能好的，自己擅长的。</p>\n<h4>5、模块化-&gt;组件化，MVP/MVVM</h4>\n<p>做到这一步，多少对项目有些熟悉了，接下来要先做的是架构的分层还是代码的分离，取决于自身对项目的熟悉程度，如果项目中已经做了模块化，那么需要考虑的是以下几点：<br>\n1、此时的模块分离的粒度是否符合当前，可能当时分层的时候是合理的，但是随着业务的增加，是不是存在一些臃肿的代码，需不需要更加细致的分离。这个需要根据项目来决定的。<br>\n2、项目越大，那就考虑组件化，组件化是在模块化的基础上弄的，所以一定要先模块化在组件化。<br>\n3、组件化需要分层更加细致，比如第三方jar层，公共组件层，组件层，调试层等等，还需要考虑组件间的耦合，通信等，具体的可以专门去学习组件化。<br>\n4、插件化，如果做完组件化，在做插件化，那么插件化将会容易很多，同理，需不需要做插件化，根据公司项目来决定。</p>\n<p>MVP/MVVM<br>\n这个主要是针对于代码的隔离，如果项目中已经使用了mvp，那就接着用mvp，不要因为一些东西出来了，比如现在Google强推一个jetpack，就马上换MVVM，那样风险是非常大的，如果都是allinone在一个activity，那么直接就使用MVVM来进行重构。LiveData + ViewModel优势是很大的。</p>\n<p>组件化 + MVP + MVVM可参考：<a href=\"https://www.cnblogs.com/huangjialin/p/13086553.html\">https://www.cnblogs.com/huangjialin/p/13086553.html</a></p>\n<h4>6、涉及模式的使用</h4>\n<p>到这一步，基本对整个项目都是有一个明显的认识了，到这里就要考虑业务了，需要考虑更多的是业务的扩展性好不好，可读性好不好，好不好维护了。在这里我们可以根据自己实际的项目来使用一些设计模式，比如单例，观察者，工厂，Build模式，策略模式 等等</p>\n<h4>7、网络数据结构重构</h4>\n<p>这个看公司业务来决定，这个处理的是后端返回的数据结构是否需要统一，这里看公司和前后端的情况来决定。毕竟这个改动，不光是前端改，也需要后端同学改动了，工作量大，风险很高。</p>\n<h4>8、性能优化：卡顿，内存，启动，布局优化，apk体积</h4>\n<p>到这一步，重构代码这部分，基本OK了，现在需要考虑的是应用的性能问题了，这里我列出来，我个人觉得从左到右  优先级由高到底 的顺序来处理，具体怎么做，参考这里。<br>\n卡顿优化：<a href=\"https://www.cnblogs.com/huangjialin/p/13389421.html\">https://www.cnblogs.com/huangjialin/p/13389421.html</a><br>\n内存优化：<a href=\"https://www.cnblogs.com/huangjialin/p/13327949.html\">https://www.cnblogs.com/huangjialin/p/13327949.html</a><br>\n启动优化：<a href=\"https://www.cnblogs.com/huangjialin/p/13292042.html\">https://www.cnblogs.com/huangjialin/p/13292042.html</a><br>\n布局优化：<a href=\"https://www.cnblogs.com/huangjialin/p/13353541.html\">https://www.cnblogs.com/huangjialin/p/13353541.html</a></p>\n<h4>9、文档输出</h4>\n<p>非常重要！！！非常重要！！！非常重要！！！<br>\n这一步没做好，很容易导致前面做的前功尽弃。所以需要一边重构，一边输出文档，后面接手的人，会感谢你的。</p>\n<h4>10、重构之路，任重而道远，需要定期重构。</h4>\n<p>除非非常大的重构，否则重构不需要特意排期，只要我们发现某个地方不合理，都可以进行重构，但是需要通知测试人员注意测试。重构之路，任重而道远 ！！！！！！！！！！！！！！！！</p>\n\n</div>", "create_date": "2020-09-12", "tags": "家磷,编辑,收藏", "comment_nums": 0, "praise_nums": 0, "fav_nums": 0, "url": "https://www.cnblogs.com/huangjialin/p/13657695.html", "front_image_url": ["https://pic.cnblogs.com/face/967362/20180322142252.png"], "url_object_id": "d41d8cd98f00b204e9800998ecf8427e", "front_image_path": "full/9a174fc7d58c5d7d3cecba038b05e3843f1cb1c9.jpg"},{"title": "vue父子传值与非父子传值-风骚男", "content": "<div id=\"cnblogs_post_body\" class=\"blogpost-body cnblogs-markdown\">\n    <blockquote>\n<p>大概梳理下传值的几种方式</p>\n</blockquote>\n<h3>一：父子组件传值</h3>\n<ol>\n<li>props方式</li>\n</ol>\n<blockquote>\n<p>子组件对外暴露方法并向父组件传递由于触发方法导致的值的变化，父组件接收子组件传递来的值；子组件接收父组件传递来的值，并根据传递来的值在子组件内部进行各种操作</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>Tips：子组件只能接受值和发射(状态)值，父组件不能操作子组件的方法和属性</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>仅适合传入数据</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<ol start=\"2\">\n<li>$parents与$children方式</li>\n</ol>\n<blockquote>\n<p>可操作父组件或子组件方法及属性，但不推荐</p>\n</blockquote>\n<pre><code> 1. $parent ： 当前组件树的根实例，如果没有则是该组件树本身\n</code></pre>\n<blockquote>\n<blockquote>\n<p>用于子组件获取父组件实例并操作父组件属性和方法；</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>高组件化开发环境下不建议使用，<strong>高耦合度</strong>，不易复用；</p>\n</blockquote>\n</blockquote>\n<pre><code> 2. $children:当前实例的 **直属** 子组件集合\n</code></pre>\n<blockquote>\n<blockquote>\n<p>以数组方式存在，数组内子组件成员可能会因为增减组件导致下标发生偏移；</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>不保证顺序，非响应式，仅可拿到子组件下标；</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>若有需要，推荐使用for...of遍历子组件实例；</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>在需要拿到所有子组件时才用到，<strong>日常不建议使用</strong>；</p>\n</blockquote>\n</blockquote>\n<ol start=\"3\">\n<li>$refs与ref方式</li>\n</ol>\n<blockquote>\n<p>用于调用子组件的属性和方法，默认空对象；</p>\n</blockquote>\n<blockquote>\n<p>最常用；</p>\n</blockquote>\n<blockquote>\n<p><strong>应该在父组件内给子组件本身添加ref</strong>；</p>\n</blockquote>\n<blockquote>\n<p>this.$refs的意义：该vue实例下的有ref标识的子组件的合集，可以直接通过this.$refs.ref.data/methods来调用子组件数据或方法；</p>\n</blockquote>\n<blockquote>\n<p>为确保子组件完全挂载完毕，应在mounted生命周期内或者使用this.$nextTick()回调来操作子组件的方法或属性；</p>\n</blockquote>\n<blockquote>\n<p>语法： this.$refs.ref</p>\n</blockquote>\n<h3>二：非父子组件传值</h3>\n<ol>\n<li>$root： 访问VUE根组件</li>\n</ol>\n<blockquote>\n<p>略略略</p>\n</blockquote>\n<ol start=\"2\">\n<li>$emit 与 $on</li>\n</ol>\n<blockquote>\n<p>该方法可以直接实现两个页面间传值，而不拘泥于是否是父子关系</p>\n</blockquote>\n<blockquote>\n<p>该方式需要新建一个js文件作为载体， 由该文件对象负责传递数据；</p>\n</blockquote>\n<pre><code class=\"language-javascript\">// 公共文件 pub.js\nimport Vue from 'vue'\nlet pub = new Vue()\nexport default pub \n//至此，公共文件创建完毕\n</code></pre>\n<p>假设页面a发送数据，页面b接收数据：</p>\n<blockquote>\n<p>页面a，页面b均需要导入文件pub.js</p>\n</blockquote>\n<p>//页面a</p>\n<pre><code class=\"language-javascript\">import Pub from '../utils/public.js'\nexport default {\n      data(){\n          pageA:'我是页面a的数据'\n      },\n      methods:{\n            emitPub(){\n\t\tPub.$emit('goThere',pageA)\n\t    }\n      }\n}\n</code></pre>\n<p>//页面b</p>\n<pre><code class=\"language-javascript\">import Pub from '../utils/public.js'\nexport default {\n      data(){\n          pageB:''\n      },\n      mounted(){\n          //需要在组件加载完毕后使用\n          //res： 页面a发射的数据    \n          Pub.$on('goThere',res=&gt;{\n            this.pageB = res\n          })\n      }\n}\n</code></pre>\n<blockquote>\n<p>tips: 经试验，$on的参数二如果是普通函数，this指向会发生错误，因而推荐使用箭头函数(这是由于箭头函数下的this继承了所处函数的上下文环境，妙蛙)</p>\n</blockquote>\n<p>以上</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1542059/202009/1542059-20200912180801745-1095251634.png\" alt=\"\" loading=\"lazy\"></p>\n\n</div>", "create_date": "2020-09-12", "tags": "致爱丽丝,编辑,收藏", "comment_nums": 0, "praise_nums": 0, "fav_nums": 0, "url": "https://www.cnblogs.com/hjk1124/p/13657916.html", "front_image_url": ["https://pic.cnblogs.com/face/1542059/20190830102358.png"], "url_object_id": "d41d8cd98f00b204e9800998ecf8427e", "front_image_path": "full/97d301c2d38cb312656f8357e392a0585d85d5a0.jpg"}